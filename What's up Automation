import asyncio
from telegram import Bot
import re
from supabase import create_client, Client
import os
import requests
from datetime import datetime, timedelta
from datetime import datetime, timedelta
import pywhatkit
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time
import pyperclip
import pyautogui
import webbrowser




SUPABASE_URL="http://192.168.1.34:8000/"
SUPABASE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiaXNzIjoic3VwYWJhc2UiLCJpYXQiOjE3Mjc3MjEwMDAsImV4cCI6MjA0MzA4MTAwMH0.igskkyDY2XoeA7LvE_vGLjS5-etBAHsvYms75UJVEyg"


supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)





async def send_text():
    # bot = Bot(token=bot_token)
    
    two_days_ago = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')

    # Simulate Supabase query
    res = supabase.table('channel_automation_template').select('id', 'meta_data').eq('social_media_type', 'whatsapp').execute()
    obj = res.data[0].get('meta_data')
    template_id = res.data[0].get('id')
    # print(res)

    # Calculate date 30 days ago
    date_30_days_ago = (datetime.now() - timedelta(days=20)).strftime("%Y-%m-%d")

    channel_res = supabase.table('channel_automation').select('id', 'chat_id', 'channel_base').eq("social_media_type",'whatsapp').execute()
    channel_res = channel_res.data
    print(channel_res)
    for channel in channel_res:
       
        role =channel['channel_base']
        
        role = re.sub(r'\s+', '-', role).lower()
        print(role, '.................')
        chat_id = channel['chat_id']

        # break
        id = channel['id']
        # Make API request for each role
        api_url = f"https://sapi.kalibre.ai/api/v1/jobs/socialmedia/?c=5&h=8&cc=in&role={role}"
        print(api_url)
        #https://sapi.kalibre.ai/api/v1/jobs/socialmedia/?c=3&d=2&cc=in&role=marketing&location=bengaluru
        dev_api = requests.get(api_url)
        # print(dev_api.json())
# &cc=in&role={role}
        jobs = dev_api.json()
        # break

        
 
        
        # print(len(jobs))
        
        
        if not jobs:
            continue    

        desc = ""
        # jobs = jobs[0]
        role_update = obj["title"]
        for job in jobs:
            # print(job)
            
            company_name = job.get('job_details').get('company',{}).get('company_name')
            job_role = job.get('job_details').get('jobrole',{}).get('name')
            city_name = job.get('job_details').get('locations',{}).get('locations')[0]
            apply_link = "https://app.kalibre.ai/api/v1/s/"+job.get('group_shorturl')+'/' + job.get('job_short_url')

            dec = obj['description']
            # print(company_name)

            # print(job_role)
            # print(company_name)
            # print(city_name)
            # print(apply_link)
            # Replacing placeholders with actual values
            dec = dec.replace("{{company_name}}", company_name)
            dec = dec.replace("{{job_role}}", job_role)
            dec = dec.replace("{{job_link_text}}", apply_link)
            dec = dec.replace("{{job_link_target}}", apply_link)
            dec = dec.replace("{{city_name}}", city_name)

            desc += dec + '\n\n'

        obj['cta'] = obj['cta'].replace("{{kalibre_link_text}}", "Kalibre")
        obj['cta'] = obj['cta'].replace("{{kalibre_link_target}}", "https://kalibre.ai")
        obj['cta'] = obj['cta'].replace("{{kalibre_linkedin_link_text}}", "Kalibre LinkedIn")
        obj['cta'] = obj['cta'].replace("{{kalibre_linkedin_link_target}}", "https://www.linkedin.com/company/kalibreai")
        role_update =role_update.replace("{{role}}", role)
        role_update =role_update.replace("{{location}}", "India")


        # print(role, 'yyyyyy')

        # print(obj['title'])

        message_text = f"""
{role_update}

{desc}
{obj['cta']}
"""

        # whatsapp_group_id = "BLsotzyUCdD6wWJWa650XC"
         
    #     pywhatkit.sendwhatmsg_to_group_instantly(
    #         group_id=chat_id,
    #         # disable_web_page_preview=True,
    #         message=" "
    #     )
    #     pyperclip.copy(message_text)
    #     pyautogui.hotkey('ctrl', 'v')
    #     time.sleep(3)
    #     pyautogui.press('enter')
    #     time.sleep(3)
    #     pyautogui.hotkey('ctrl', 'w')  # Use 'command' on Mac
    #     # webbrowser.get().close()
        

    #     print(f"Message sent to WhatsApp group: {chat_id}")

        
    # pyautogui.hotkey('alt', 'f4') 
if __name__ == "__main__":
    asyncio.run(send_text()) 
    


