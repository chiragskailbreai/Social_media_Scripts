from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# Path to your Chrome profile
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
import time
import pyperclip  # You need to install this package for clipboard functionality
import asyncio
from telegram import Bot
import re
from supabase import create_client, Client
import os
import requests
from datetime import datetime, timedelta
from datetime import datetime, timedelta
import pywhatkit
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time
import pyperclip
import pyautogui
import webbrowser
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
import random
import requests
import pickle
import os
from selenium.webdriver.common.action_chains import ActionChains
import emoji
import logging
import numpy as np
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from PIL import Image
import time
import os
import random
import logging

# Path to your Chrome profile
chrome_profile_path = "/home/vithamas/.config/google-chrome/Profile 7"




def get_message():

    SUPABASE_URL="http://192.168.1.34:8000/"
    SUPABASE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiaXNzIjoic3VwYWJhc2UiLCJpYXQiOjE3Mjc3MjEwMDAsImV4cCI6MjA0MzA4MTAwMH0.igskkyDY2XoeA7LvE_vGLjS5-etBAHsvYms75UJVEyg"


    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)



  

        # Simulate Supabase query
    res = supabase.table('channel_automation_template').select('id', 'meta_data').eq('social_media_type', 'whatsapp').execute()
    obj = res.data[0].get('meta_data')
    template_id = res.data[0].get('id')

    # Calculate date 30 days ago
    date_30_days_ago = (datetime.now() - timedelta(days=20)).strftime("%Y-%m-%d")

    channel_res = supabase.table('channel_automation').select('id', 'chat_id', 'channel_base').not_.is_("channel_base","null").eq('social_media_type', 'whatsapp').execute()
    channel_res = channel_res.data

    for channel in channel_res:
        role = channel['channel_base']
        # if role is None:
        #     break
        role_res = supabase.table('roles').select('id').eq("attributes->>name", role).limit(1).execute()
        # print(role)
        role_id = role_res.data[0].get('id')
        print(role_id)        
        chat_id = channel['chat_id']
        id = channel['id']
        print(role, '.................')
        
        # Make API request for each role
        print()
        api_url = f"https://sapi.kalibre.ai/api/v1/jobs/groups/search/?use_case=social&category=Role&job_cc=in&category_id={role_id}"
        # print(api_url)
        # print()
        api1 = requests.get(api_url)
        grps_data = api1.json()

        desc = ""  # Initialize description for each role
        job_ids_=[]
        for data in grps_data:
            group_short_url = data.get('group_short_id')
            grp_id = data.get('group_id')
            job_ids = data.get('job_ids')

            if job_ids:
                job_ids_.extend(job_ids)
            

        if job_ids_: 
            # print(job_ids_)   
            job_response = f"https://sapi.kalibre.ai/api/v1/jobs/search/?&id__in={'__'.join(random.sample(job_ids_, 2))}"
            # print(job_response)
                # print()
                # break
                # print(job_response.json())
            job_response = requests.get(job_response)
            data = job_response.json()
                # Check if 'results' key exists before iterating
            if 'results' in data:
                for result in data['results']:
                    company_name = result['company']['company_name']
                    city_name = result['job_locations'][0]['label'] if result['job_locations'] else None
                    short_url = result['short_url']

                    apply_link = f"https://kalibre.ai/q/{group_short_url}/{short_url}"
                    # print(apply_link)
                    dec = obj['description']

                    # Replace placeholders with actual values
                    dec = dec.replace("{{company_name}}", company_name)
                    dec = dec.replace("{{job_role}}", role)
                    dec = dec.replace("{{job_link_text}}", apply_link)
                    dec = dec.replace("{{job_link_target}}", apply_link)
                    dec = dec.replace("{{city_name}}", city_name)

                    desc += dec + '\n\n'
            
                # print(f"No results found for group {grp_id}. Skipping this entry.")
        
        # CTA and role update replacements
            obj['cta'] = obj['cta'].replace("{{kalibre_link_text}}", "Kalibre")
            obj['cta'] = obj['cta'].replace("{{kalibre_link_target}}", "https://kalibre.ai")
            obj['cta'] = obj['cta'].replace("{{kalibre_linkedin_link_text}}", "Kalibre LinkedIn")
            obj['cta'] = obj['cta'].replace("{{kalibre_linkedin_link_target}}", "https://www.linkedin.com/company/kalibreai")
            
            role_update = obj["title"].replace("{{role}}", role).replace("{{location}}", "India")

            # Construct message text
            message_text = f"""
{role_update}

{desc}
{obj['cta']}
    """
            

            print(message_text, 'fffffffffffffffffffffffffffffffffffffffffffffff')
            return message_text




def setup_browser():
    # Set up Chrome options and driver
    chrome_options = Options()
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument(f"user-data-dir={chrome_profile_path}")
    driver = webdriver.Chrome(options=chrome_options)
    driver.maximize_window()
    return driver

driver = setup_browser()

# Open WhatsApp Web
driver.get("https://web.whatsapp.com/")

# Define XPaths
channels_xpath = '//div[@aria-label="Channels"]'
search_xpath = '//div[@contenteditable="true"][@data-tab="3"]'
channel_name = "Data Scientist Jobs - Kalibre"  # Replace with the actual channel name
message_text = get_message()


print(message_text)
# Copy the message to the clipboard
pyperclip.copy(message_text)

try:
    # Locate and click on the "Channels" button
    channels_button = WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.XPATH, channels_xpath))
    )
    time.sleep(2)  # Optional delay before clicking
    ActionChains(driver).move_to_element(channels_button).click(channels_button).perform()
    time.sleep(2)
    print("Clicked on the 'Channels' button.")

    # Search for the specific channel
    search_box = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, search_xpath))
    )
    search_box.clear()
    search_box.send_keys(channel_name)
    time.sleep(2)  # Allow time for search results to load

    # Click on the channel name in the search results
    channel_result_xpath = f'//span[@title="{channel_name}"]'
    channel_result = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, channel_result_xpath))
    )
    channel_result.click()
    time.sleep(2)
    print(f"Opened the channel: {channel_name}")

    # Locate the message input box using the provided attributes
    message_box_xpath = '//div[@aria-placeholder="Type an update" and @contenteditable="true" and @role="textbox" and @data-tab="10"]'
    message_box = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, message_box_xpath))
    )

    # Click to focus on the message box
    message_box.click()

    # Use ActionChains to simulate Ctrl+V (paste) to insert the copied message
    ActionChains(driver).key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()
    time.sleep(1)  # Wait for the message to be pasted

    # Press Enter to send the message
    ActionChains(driver).send_keys(Keys.RETURN).perform()
    print("Message sent successfully!")

except Exception as e:
    print(f"An error occurred: {e}")

finally:
    time.sleep(5)
    driver.quit()










